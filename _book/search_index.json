[
["index.html", "Visualizing the Yeast Transcriptome Chapter 1 Prerequisites", " Visualizing the Yeast Transcriptome Hackseq Yeast-Omics Collective 2019-10-19 Chapter 1 Prerequisites Install R Install R Bioconductor Install RStudio The library dependencies for this project include the following and can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) "],
["intro.html", "Chapter 2 Introduction 2.1 About the Data:", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 3. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 2.1 About the Data: data/04_remove_underscores_average_replicates/04_SC-expression.csv 1st col “gene”: gene names, lnc= long non-coding RNA all others: experimental IDs. 87 total. See /03_remove_zero_genes/03_condition_annotation.csv values: expression values. Normalized to TPM data/03_remove_zero_genes/03_condition_annotation.csv 1st “col: experimental ID. Grouped together by the first 2 letters. 2nd col”primary“: strain used, includes WT, temp sensitivity? (ex. 15 deg, 37 deg), test-control, strain codes 3rd col”secondary&quot;: experimental test, ex. salinty, temperature, ethanol, untreated… data/03_remove_zero_genes/tiddy_expressions.csv data/tidy_data/tiddy_attributes.csv data/tidy_data/tiddy_conditionss.csv data/tidy_data/tiddy_expressions.csv knitr::opts_chunk$set(eval = FALSE) "],
["methods.html", "Chapter 3 Methods 3.1 Cleaning data 3.2 Shiny App 3.3 Visualizations", " Chapter 3 Methods 3.1 Cleaning data 3.1.1 Removing zeros here::here() Get file expression &lt;- read.csv(&quot;02_expression.csv&quot;, header = T, row.names = 1) See which rows have all zeros zeros &lt;- apply(expression, 1, function(x) return(length(which(x == 0)))) Generate new data frame newExpression &lt;- expression[which(zeros != ncol(expression)),] Write to file write.csv(newExpression, &quot;03_SC_expression.csv&quot;, row.names = T) 3.1.2 Check Normalization - Matt Emery expressions &lt;- read_csv(here(&quot;data&quot;, &quot;tidy_data&quot;, &quot;tidy_expressions.csv&quot;)) expressions %&gt;% group_by(condition) %&gt;% summarise(average = mean(value), standard_deviation = sd(value)) %&gt;% arrange(standard_deviation) standard_deviation_gene &lt;- expressions %&gt;% group_by(gene) %&gt;% summarise(average = mean(value), standard_deviation = sd(value)) %&gt;% arrange(standard_deviation) Expressed in at least 5 samples: standard_deviation_gene %&gt;% filter(!str_detect(gene, &quot;^__&quot;)) %&gt;% filter(standard_deviation &gt; 0) %&gt;% arrange(standard_deviation) standard_deviation_gene %&gt;% arrange(desc(standard_deviation)) 3.1.3 Remove Underscores and average replicates - Matt Emery expressions &lt;- read_csv(here(&quot;data/03_remove_zero_genes/03_SC_expression.csv&quot;)) removed_underscores &lt;- expressions %&gt;% rename(&quot;gene&quot; = &quot;X1&quot;) %&gt;% pivot_longer(-gene) %&gt;% filter(!str_detect(gene, &quot;^_&quot;)) averaged_replicates &lt;- removed_underscores %&gt;% mutate(name = str_remove(name, &quot;.1$&quot;)) %&gt;% group_by(gene, name) %&gt;% summarise(value = mean(value)) wide_df &lt;- averaged_replicates %&gt;% pivot_wider(id_cols = gene) write_csv(wide_df, here(&quot;data/04_remove_underscores_average_replicates/04_SC_expression.csv&quot;)) 3.1.4 Load the expression matrix and associated metadata. Fix inconsistency between. Resave the cleaned tables. library(tidyverse) expression matrix, note that first column is gene names. coercing to rownames expect 6071x93 SC_expression &lt;- read.csv(&quot;data/SC_expression.csv&quot;) colnames(SC_expression)[colnames(SC_expression) == &quot;X&quot;] &lt;- &quot;gene&quot; expect 92x4 condition_annotation &lt;- read.csv(&quot;data/conditions_annotation.csv&quot;, stringsAsFactors = FALSE) expect 6071x3 labels_BP &lt;- read.csv(&quot;data/labelsBP.csv&quot;, stringsAsFactors = FALSE) expect 6071x3 labels_CC &lt;- read.csv(&quot;data/labelsCC.csv&quot;, stringsAsFactors = FALSE) expect 6071x3 labels_MF &lt;- read.csv( &quot;data/labelsMF.csv&quot;, stringsAsFactors = FALSE, header = FALSE, col.names = c(&quot;gene&quot;, &quot;validation&quot;, &quot;localization&quot;) ) metadata has 6072 rows instead of 6071. turns out there is an extra row with a gene called “gene.” must remove table(labels_MF$gene %in% rownames(SC_expression)) setdiff(labels_MF$gene, rownames(SC_expression)) labels_BP &lt;- labels_BP[labels_BP$gene != &quot;gene&quot;, ] labels_CC &lt;- labels_BP[labels_CC$gene != &quot;gene&quot;, ] labels_MF &lt;- labels_BP[labels_MF$gene != &quot;gene&quot;, ] stopifnot(all(table(SC_expression$gene %in% labels_BP$gene))) stopifnot(all(table(SC_expression$gene %in% labels_CC$gene))) stopifnot(all(table(SC_expression$gene %in% labels_MF$gene))) table.names &lt;- c(&quot;01_condition_annotation.csv&quot;, &quot;01_labelsBP.csv&quot;, &quot;01_labelsCC.csv&quot;, &quot;01_labelsMF.csv&quot;, &quot;01_SC_expression.csv&quot;) tables &lt;- list(condition_annotation, labels_BP, labels_CC, labels_MF, SC_expression) for (i in 1:length(tables)) { write.table(tables[i], sep = &quot;,&quot;, quote = FALSE, row.names = FALSE, paste0(&quot;data/&quot;, table.names[i])) } 3.1.5 Grouping experiments load package dependancy library(tidyverse) library(stringr) can download limma through the bioconductor: if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;limma&quot;) library(limma) set time zone to proper location options(readr.default_locale=readr::locale(tz=&quot;America/Vancouver&quot;)) Load datafiles conditions_annotation &lt;- read_csv(&quot;data/00_raw/conditions_annotation.csv&quot;) SC_expression &lt;- read_csv(&quot;data/04_remove_underscores_average_replicates/04_SC_expression.csv&quot;) View(conditions_annotation) Create group based on first to char in ID which we believe groups data from the same lab conditions_annotation$Group &lt;- NA conditions_annotation$Group &lt;- substr(conditions_annotation$ID, 1, 2) convert everything in primary and secondary to lower case as currently mixed case conditions_annotation$primary &lt;- str_to_lower(conditions_annotation$primary, locale = &quot;en&quot;) conditions_annotation$secondary &lt;- str_to_lower(conditions_annotation$secondary, locale = &quot;en&quot;) conditions_annotation$Ref &lt;- NA split out the SA group and merge in gene expression data group_SA &lt;- conditions_annotation[conditions_annotation$Group == &quot;SA&quot;, ] SA_expression &lt;- SC_expression$gene saa_subset &lt;- group_SA %&gt;% pull(ID) SA_expressiontemp &lt;- SC_expression %&gt;% select(saa_subset) SAtable &lt;- cbind(SA_expression, SA_expressiontemp) colnames(SAtable)[1] &lt;- &quot;Gene&quot; SAwildGalactose &lt;- SAwildGalactose[,1:3] rownames(SAwildGalactose) &lt;- SAwildGalactose$Gene SAwildGalactose$Gene &lt;- NULL fit &lt;- lmFit(SAwildGalactose) SAwildGalactose$fold &lt;- SAwildGalactose$SAASAQ/SAwildGalactose$SAABRQ SAwildGalactose$pval &lt;- fit$p.value df &lt;- SAwildGalactose[is.finite(rowSums(SAwildGalactose)),] g = ggplot(data=df, aes(x=log2(fold), y=-log10(pval))) + geom_point(alpha=0.4, size=5) + theme(legend.position = &quot;none&quot;) + xlim(c(-5, 12)) + ylim(c(0, 5)) + xlab(&quot;log2 fold change&quot;) + ylab(&quot;-log10 p-value&quot;) 3.2 Shiny App 3.3 Visualizations 3.3.1 UMAP Generation - Matt Emery library(umapr) library(tidyverse) expression &lt;- read_csv(here(&quot;data/04_remove_underscores_average_replicates/04_SC_expression.csv&quot;)) expression_matrix &lt;- expression %&gt;% select_if(is.numeric) %&gt;% as.matrix() umap_expression &lt;- umap(expression_matrix) umap_df &lt;- bind_cols(expression %&gt;% select(gene), umap_expression %&gt;% select(UMAP1, UMAP2)) umap_df &lt;- umap_df %&gt;% mutate(long_non_coding = str_detect(gene, &quot;^SCER_lnc&quot;)) write_csv(umap_df, here(&quot;data/umap.csv&quot;)) ggplot(umap_df, aes(UMAP1, UMAP2, color = long_non_coding)) + geom_point(alpha = 0.2) tidy_attributes &lt;- read_csv(here(&quot;data/tidy_data/tidy_attributes.csv&quot;)) wide_attributes &lt;- tidy_attributes %&gt;% pivot_wider(gene) attributes_df &lt;- umap_df %&gt;% inner_join(wide_attributes) umap_coloring &lt;- function(filter_query) { filtered_values &lt;- tidy_attributes %&gt;% filter(value == {{ filter_query }}) %&gt;% pull(gene) filter_df &lt;- umap_df %&gt;% mutate({{ filter_query }} := map_lgl(gene, function(x) x %in% filtered_values)) ggplot(filter_df, aes_string(&quot;UMAP1&quot;, &quot;UMAP2&quot;, color = filter_query)) + geom_point() } g &lt;- umap_coloring(&quot;protein&quot;) ggsave(here(&quot;output/first_umap.png&quot;), g, width = 16, height = 9) tidy_attributes %&gt;% distinct(value) 3.3.2 Heat Map Generation rel_expr &lt;- read_csv(fs::path(here::here(), &quot;data&quot;,&quot;00_raw&quot;,&quot;SC_expression.csv&quot;)) strain_meta &lt;- read_csv(fs::path(here::here(), &quot;data&quot;,&quot;00_raw&quot;,&quot;conditions_annotation.csv&quot;)) # read in the gene metadata, with additional cols for tags tag.vec &lt;- c(&quot;name&quot;,&quot;confidence&quot;, paste0(&quot;tag&quot;,1:10)) # biol process bp_meta &lt;- read_csv(fs::path(here::here(),&quot;data&quot;,&quot;00_raw&quot;,&quot;labels_BP.csv&quot;), col_names = tag.vec) # cellular_component cc_meta &lt;- read_csv(fs::path(here::here(),&quot;data&quot;,&quot;00_raw&quot;,&quot;labels_CC.csv&quot;), col_names = tag.vec) # molecular func mf_meta &lt;- read_csv(fs::path(here::here(),&quot;data&quot;,&quot;00_raw&quot;,&quot;labels_MF.csv&quot;), col_names = tag.vec) # cols are strains, rows are genes # threshold &lt;- 0.0001 # # remove dups rel_expr &lt;- rel_expr %&gt;% select(-ends_with(&quot;_1&quot;)) %&gt;% # remove duplicate strains dplyr::rename(gene_name = X1) %&gt;% pivot_longer(-gene_name, names_to = &quot;culture_treatment&quot;, values_to = &quot;rel_expr&quot;) %&gt;% select(culture_treatment, gene_name, rel_expr) #%&gt;% # reorder just to make look better # filter(rel_expr &gt; threshold) rel_expr strain_meta %&gt;% distinct(primary) strain_meta %&gt;% distinct(secondary) strain_meta &lt;- strain_meta %&gt;% dplyr::rename(culture_treatment = ID) %&gt;% mutate(secondary = if_else(secondary == &quot;&lt;not provided&gt;&quot;, NA_character_, secondary)) head(strain_meta) # not sure how to tidy this clean_annotations &lt;- function(df){ df %&gt;% pivot_longer(cols = paste0(&quot;tag&quot;,1:10), names_to = &quot;tag&quot;, values_to = &quot;vals&quot;) %&gt;% drop_na() %&gt;% select(-tag) %&gt;% dplyr::rename(tag = vals, gene_name = name) %&gt;% filter(gene_name != &quot;gene&quot;, !tag %in% c(&quot;biological_process&quot;,&quot;molecular_function&quot;, &quot;cellular_component&quot;), confidence == &quot;Verified&quot;) %&gt;% # remove artifacts select(-confidence) } bp_meta &lt;- bp_meta %&gt;% clean_annotations() bp_meta %&gt;% distinct(tag) cc_meta &lt;- cc_meta %&gt;% clean_annotations() cc_meta %&gt;% distinct(tag) mf_meta &lt;- mf_meta %&gt;% clean_annotations() cc_meta %&gt;% distinct(tag) go_type &lt;- mf_meta # compare RNA expression of strains with go_tag1 and go_tag2 heatmap_by_GO &lt;- rel_expr %&gt;% left_join(go_type, by=&quot;gene_name&quot;) %&gt;% left_join(strain_meta, by=&quot;culture_treatment&quot;) %&gt;% # filter(tag %in% go_tags) %&gt;% group_by(tag, primary) %&gt;% summarise(rel_expr = mean(rel_expr)) %&gt;% ungroup() ggplot(heatmap_by_GO, aes(x=primary %&gt;% fct_reorder(-rel_expr), y=tag %&gt;% fct_reorder(-rel_expr))) + geom_tile(aes(fill=rel_expr)) + scale_fill_viridis_c() + ggtitle(&quot;Mean transcript abundance&quot;) + theme(axis.text.x = element_text(angle = 90, hjust=0.99, vjust=0.5)) + ylab(&quot;Molecular Function (GO)&quot;) + xlab(&quot;primary&quot;) + labs(fill=&quot;Norm. rel. expr.&quot;) "],
["visualizations-1.html", "Chapter 4 Visualizations 4.1 UMAP 4.2 Heat Maps", " Chapter 4 Visualizations 4.1 UMAP ?? 4.2 Heat Maps ?? "],
["final-words.html", "Chapter 5 Final Words 5.1 Summary", " Chapter 5 Final Words Discussion points We have finished a nice book. 5.1 Summary "],
["references.html", "References", " References Introduction to Data Science with R RNAseq Analysis tutorials in R and Differential expression Analysis Data Manipulation and Visualization using R RNAseq data analysis workflow Setting up reproducible projects in R and package management for reproducible R code and reproducibility good practices Yeast pathway analysis in R Additional resources from UCSF Data Science Initiative "]
]
